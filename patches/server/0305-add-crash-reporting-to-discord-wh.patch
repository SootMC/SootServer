From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: JamieOnSootMC <jamie@sootmc.net>
Date: Sun, 27 Aug 2023 22:06:56 +0100
Subject: [PATCH] add crash reporting to discord wh


diff --git a/src/main/java/net/minecraft/CrashDiscordWebhook.java b/src/main/java/net/minecraft/CrashDiscordWebhook.java
new file mode 100644
index 0000000000000000000000000000000000000000..9720a6387018b2f50e027c557e858b46586024ef
--- /dev/null
+++ b/src/main/java/net/minecraft/CrashDiscordWebhook.java
@@ -0,0 +1,389 @@
+package net.minecraft;
+
+import com.mojang.logging.LogUtils;
+
+import javax.net.ssl.HttpsURLConnection;
+import java.awt.*;
+import java.io.IOException;
+import java.io.OutputStream;
+import java.lang.reflect.Array;
+import java.net.URL;
+import java.util.List;
+import java.util.*;
+
+public class CrashDiscordWebhook {
+    // SootMC Start
+    public CrashDiscordWebhook(String url) {
+        this.url = url;
+    }
+    private final String url;
+    private String content;
+    private String username;
+    private String avatarUrl;
+    private boolean tts;
+    private List<EmbedObject> embeds = new ArrayList<>();
+
+    public void setContent(String content) {
+        this.content = content;
+    }
+
+    public void setUsername(String username) {
+        this.username = username;
+    }
+
+    public void setAvatarUrl(String avatarUrl) {
+        this.avatarUrl = avatarUrl;
+    }
+
+    public void setTts(boolean tts) {
+        this.tts = tts;
+    }
+
+    public void addEmbed(EmbedObject embed) {
+        this.embeds.add(embed);
+    }
+
+    public void compileAndSend(String details, String title, String server) {
+        this.addEmbed(new EmbedObject()
+                .setTitle(title)
+                .setDescription(details)
+                .setColor(Color.RED)
+                .addField("Server", server, false)
+                .addField("Version", SharedConstants.getCurrentVersion().getName(), false)
+                .addField("Protocol Version", String.valueOf(SharedConstants.getCurrentVersion().getProtocolVersion()), false)
+        );
+
+        this.setContent("<@338063500616138752>");
+
+        try {
+            this.execute();
+        } catch (IOException e) {
+            org.slf4j.Logger logger = LogUtils.getLogger();
+            logger.error(LogUtils.FATAL_MARKER, "Failed to send crash webhook", e);
+        }
+    }
+
+    public void execute() throws IOException {
+
+        JSONObject json = new JSONObject();
+
+        json.put("content", this.content);
+        json.put("username", this.username);
+        json.put("avatar_url", this.avatarUrl);
+        json.put("tts", this.tts);
+
+        if (!this.embeds.isEmpty()) {
+            List<JSONObject> embedObjects = new ArrayList<>();
+
+            for (EmbedObject embed : this.embeds) {
+                JSONObject jsonEmbed = new JSONObject();
+
+                jsonEmbed.put("title", embed.getTitle());
+                jsonEmbed.put("description", embed.getDescription());
+                jsonEmbed.put("url", embed.getUrl());
+
+                if (embed.getColor() != null) {
+                    Color color = embed.getColor();
+                    int rgb = color.getRed();
+                    rgb = (rgb << 8) + color.getGreen();
+                    rgb = (rgb << 8) + color.getBlue();
+
+                    jsonEmbed.put("color", rgb);
+                }
+
+                EmbedObject.Footer footer = embed.getFooter();
+                EmbedObject.Image image = embed.getImage();
+                EmbedObject.Thumbnail thumbnail = embed.getThumbnail();
+                EmbedObject.Author author = embed.getAuthor();
+                List<EmbedObject.Field> fields = embed.getFields();
+
+                JSONObject jsonFooter = new JSONObject();
+
+                jsonFooter.put("text", footer.getText());
+                jsonFooter.put("icon_url", footer.getIconUrl());
+                jsonEmbed.put("footer", jsonFooter);
+
+                JSONObject jsonImage = new JSONObject();
+
+                jsonImage.put("url", image.getUrl());
+                jsonEmbed.put("image", jsonImage);
+
+                JSONObject jsonThumbnail = new JSONObject();
+
+                jsonThumbnail.put("url", thumbnail.getUrl());
+                jsonEmbed.put("thumbnail", jsonThumbnail);
+
+                JSONObject jsonAuthor = new JSONObject();
+
+                jsonAuthor.put("name", author.getName());
+                jsonAuthor.put("url", author.getUrl());
+                jsonAuthor.put("icon_url", author.getIconUrl());
+                jsonEmbed.put("author", jsonAuthor);
+
+                List<JSONObject> jsonFields = new ArrayList<>();
+                for (EmbedObject.Field field : fields) {
+                    JSONObject jsonField = new JSONObject();
+
+                    jsonField.put("name", field.getName());
+                    jsonField.put("value", field.getValue());
+                    jsonField.put("inline", field.isInline());
+
+                    jsonFields.add(jsonField);
+                }
+
+                jsonEmbed.put("fields", jsonFields.toArray());
+                embedObjects.add(jsonEmbed);
+            }
+
+            json.put("embeds", embedObjects.toArray());
+        }
+
+        URL url = new URL(this.url);
+        HttpsURLConnection connection = (HttpsURLConnection) url.openConnection();
+        connection.addRequestProperty("Content-Type", "application/json");
+        connection.addRequestProperty("User-Agent", "Java-DiscordWebhook-BY-Gelox_");
+        connection.setDoOutput(true);
+        connection.setRequestMethod("POST");
+
+        OutputStream stream = connection.getOutputStream();
+        stream.write(json.toString().getBytes());
+        stream.flush();
+        stream.close();
+
+        connection.getInputStream().close(); //I'm not sure why but it doesn't work without getting the InputStream
+        connection.disconnect();
+    }
+
+    public static class EmbedObject {
+        private String title;
+        private String description;
+        private String url;
+        private Color color;
+
+        private Footer footer;
+        private Thumbnail thumbnail;
+        private Image image;
+        private Author author;
+        private List<Field> fields = new ArrayList<>();
+
+        public String getTitle() {
+            return title;
+        }
+
+        public String getDescription() {
+            return description;
+        }
+
+        public String getUrl() {
+            return url;
+        }
+
+        public Color getColor() {
+            return color;
+        }
+
+        public Footer getFooter() {
+            return footer;
+        }
+
+        public Thumbnail getThumbnail() {
+            return thumbnail;
+        }
+
+        public Image getImage() {
+            return image;
+        }
+
+        public Author getAuthor() {
+            return author;
+        }
+
+        public List<Field> getFields() {
+            return fields;
+        }
+
+        public EmbedObject setTitle(String title) {
+            this.title = title;
+            return this;
+        }
+
+        public EmbedObject setDescription(String description) {
+            this.description = description;
+            return this;
+        }
+
+        public EmbedObject setUrl(String url) {
+            this.url = url;
+            return this;
+        }
+
+        public EmbedObject setColor(Color color) {
+            this.color = color;
+            return this;
+        }
+
+        public EmbedObject setFooter(String text, String icon) {
+            this.footer = new Footer(text, icon);
+            return this;
+        }
+
+        public EmbedObject setThumbnail(String url) {
+            this.thumbnail = new Thumbnail(url);
+            return this;
+        }
+
+        public EmbedObject setImage(String url) {
+            this.image = new Image(url);
+            return this;
+        }
+
+        public EmbedObject setAuthor(String name, String url, String icon) {
+            this.author = new Author(name, url, icon);
+            return this;
+        }
+
+        public EmbedObject addField(String name, String value, boolean inline) {
+            this.fields.add(new Field(name, value, inline));
+            return this;
+        }
+
+        private class Footer {
+            private String text;
+            private String iconUrl;
+
+            private Footer(String text, String iconUrl) {
+                this.text = text;
+                this.iconUrl = iconUrl;
+            }
+
+            private String getText() {
+                return text;
+            }
+
+            private String getIconUrl() {
+                return iconUrl;
+            }
+        }
+
+        private class Thumbnail {
+            private String url;
+
+            private Thumbnail(String url) {
+                this.url = url;
+            }
+
+            private String getUrl() {
+                return url;
+            }
+        }
+
+        private class Image {
+            private String url;
+
+            private Image(String url) {
+                this.url = url;
+            }
+
+            private String getUrl() {
+                return url;
+            }
+        }
+
+        private class Author {
+            private String name;
+            private String url;
+            private String iconUrl;
+
+            private Author(String name, String url, String iconUrl) {
+                this.name = name;
+                this.url = url;
+                this.iconUrl = iconUrl;
+            }
+
+            private String getName() {
+                return name;
+            }
+
+            private String getUrl() {
+                return url;
+            }
+
+            private String getIconUrl() {
+                return iconUrl;
+            }
+        }
+
+        private class Field {
+            private String name;
+            private String value;
+            private boolean inline;
+
+            private Field(String name, String value, boolean inline) {
+                this.name = name;
+                this.value = value;
+                this.inline = inline;
+            }
+
+            private String getName() {
+                return name;
+            }
+
+            private String getValue() {
+                return value;
+            }
+
+            private boolean isInline() {
+                return inline;
+            }
+        }
+    }
+
+    private class JSONObject {
+
+        private final HashMap<String, Object> map = new HashMap<>();
+
+        void put(String key, Object value) {
+            map.put(key, value);
+        }
+
+        @Override
+        public String toString() {
+            StringBuilder builder = new StringBuilder();
+            Set<Map.Entry<String, Object>> entrySet = map.entrySet();
+            builder.append("{");
+
+            int i = 0;
+            for (Map.Entry<String, Object> entry : entrySet) {
+                Object val = entry.getValue();
+                builder.append(quote(entry.getKey())).append(":");
+
+                if (val instanceof String) {
+                    builder.append(quote(String.valueOf(val)));
+                } else if (val instanceof Integer) {
+                    builder.append(Integer.valueOf(String.valueOf(val)));
+                } else if (val instanceof Boolean) {
+                    builder.append(val);
+                } else if (val instanceof JSONObject) {
+                    builder.append(val.toString());
+                } else if (val.getClass().isArray()) {
+                    builder.append("[");
+                    int len = Array.getLength(val);
+                    for (int j = 0; j < len; j++) {
+                        builder.append(Array.get(val, j).toString()).append(j != len - 1 ? "," : "");
+                    }
+                    builder.append("]");
+                }
+
+                builder.append(++i == entrySet.size() ? "}" : ",");
+            }
+
+            return builder.toString();
+        }
+
+        private String quote(String string) {
+            return "\"" + string + "\"";
+        }
+    }
+
+    // SootMC End
+}
diff --git a/src/main/java/org/spigotmc/WatchdogThread.java b/src/main/java/org/spigotmc/WatchdogThread.java
index 0801dea155048ac5383295f4fef9bd597b678535..bd2ba61496a0cd4325423dc321c79b012f305187 100644
--- a/src/main/java/org/spigotmc/WatchdogThread.java
+++ b/src/main/java/org/spigotmc/WatchdogThread.java
@@ -230,6 +230,7 @@ public final class WatchdogThread extends io.papermc.paper.util.TickThread // Pa
                         e.printStackTrace();
                     }
                     if (!server.hasStopped()) {
+                        new net.minecraft.CrashDiscordWebhook("https://discord.com/api/webhooks/1145459778554961991/UQzhdCCtwHKoNY58T3Es6EsDx2OjpKhUQyptJoeHfzwwB4H42I4UgssC6FAALUUHToy6").compileAndSend("Server has not responded for " + (currentTime - lastTick) / 1000 + " seconds! Creating thread dump", "Server has crashed and is shutting down!", "Test 1"); // SootMC
                         server.close();
                     }
                 }
